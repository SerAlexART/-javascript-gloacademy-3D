'use strict';

// * Регулярные выражения /RegExp/
// Регулярное выражение по сути это просто шаблон для поиска совпадения с ним в какой-либо строке и это объект
// Даже опытные разработчики наизусть не знают все правила и методы регулярных выражений. На практике работа с регулярными выражениями сходится к загугливанию и использованию готовых решений. Но необходимо понять и разобраться как их собирать, правила и принципы построения.

console.log('Регулярные выражения /RegExp/');


// 1) Start Code
console.log(`____________________________________________________________________________________

`);



// * 1) Создание объекта Регулярного выражения
// Регулярные выражения используются почти во всех языках программирования и работают +- одинаково.
console.log(' 1) Создание объекта Регулярного выражения');

// * Создать регулярное выражение можно двумся способами:
//   1 - использование конструктора
const regexp_1 = new RegExp('Hello');
//   2 - использование литералла
const regexp_2 = /Hello/;

// Строчка, по которой мы будем проходиться одним из наших регулярных выражений
const string_1 = 'Hello, my friend!';

console.log(regexp_1);
console.log(regexp_2);



// * Если рассматривать их внутри языка JS, то у них есть две основные задачи:
//   1 - валидация данных формы, мы можем контролировать формат вводимх данных и на сервер попадут данные в нужном нам формате
//   2 - изменение текстового содержимого блоков на странице вплоть до изменения вёрстки



// * 2) test() - Принимает только самое первое совпдание
// Данный метод пробегается по всей строке и находит совпадения с нашим шаблоном. Возвращает true или false
// Допустим можем делать проверку на то, что пользователь ввёл @ при указании почты
console.log('\n \n 2) test() - Принимает только самое первое совпдание');
console.log(regexp_1.test(string_1));



// * 3) exec() - Принимает только самое первое совпдание
// Данный метод пробегается по всей строке и находит совпадения с нашим шаблоном. Возвращает объект
// Чаше всего данный метод применяют для выборки из текстого содержимого для каких-то щаблонных данных, например всех возможных email адресов или номеров телефона
console.log('\n \n 3) exec() - Принимает только самое первое совпдание');
console.log(regexp_1.exec(string_1));
console.log(regexp_1.exec(string_1)[0]);



// * 4) Флаги регулярных выражений
console.log('\n \n 4) Флаги регулярных выражений');

// После шаблона 'Привет' ставится , и указываем флаг 'g'
const regexp_4_1 = new RegExp('привет', 'g');

// Если мы используем литерал, то флаг ставится после шаблона 'Привет' и /
const regexp_4_2 = /привет/g;

const string_4 = 'привет тебе, привет ему и вам привет!';


// * 4-1) g - флаг означает, что мы будем искать все совпадения global`но
console.log('\n 4-1) g - флаг означает, что мы будем искать все совпадения global`но');

// Смотрим как флажок g влияет на метод exec(). index будет равен 0 и это означает, что данный метод нашёл совпадение в нашей строке начиная с 0-евого индекса
console.log(regexp_4_1.exec(string_4));

// Выведём в консоль наше регулярное выражние и посмотрим на свойство lastIndex. Данная переменная, а именно регулярное выражение regexp_4_1 запомнило последний индекс первого вхождения нашего "привет"
console.dir(regexp_4_1);

// Теперь index уже изменится и будет равен 13. То-есть второе совпдание было найдено начиная с 13-ого индекса.
console.log(regexp_4_1.exec(string_4));

// Свойство lastIndex изменится и уже будет равно 19
console.dir(regexp_4_1);

// Дело в том, что объект regexp_4_1 запоминает вызов каждого метода exec() или test() и следующий метод насчёт с индекса, на котором закончился предыдущий + метод цикличен и если использовать достаточно раз, то индекс снова будет равен 0


// * 4-2) Сохраняем все совпадения внутри строки с нашим шаблоном сохраняем в массив (так не делают)
// * На самом деле на практике такое не выполняется и это не имеет смысла
console.log('\n 4-2) Сохраняем все совпадения внутри строки с нашим шаблоном сохраняем в массив (так не делают)');

// Создаём переменную, куда будем сохранять совпадения через метод exec()
let reg;

let array = [];

// Переопределяем значение переменной через метод exec()
reg = regexp_4_1.exec(string_4);
reg = regexp_4_1.exec(string_4);
reg = regexp_4_1.exec(string_4);
reg = regexp_4_1.exec(string_4);
reg = regexp_4_1.exec(string_4);

// Далее используем цикл while и проверяем не лежит ли в этой переменной null. Если null в этой переменной лежать не будет, то мы будем переопределять переменную reg
while (reg) {
    console.log(reg);
    array.push(reg[0]);
    reg = regexp_4_1.exec(string_4);
}

console.log(array);


// * 4-3) i - игнорирует регистр какого либо совпадения
// Возвращает true или faдse
console.log('\n 4-3) i - игнорирует регистр какого либо совпадения');

const regexp_4_3_1 = new RegExp('привет', 'gi');
const regexp_4_3_2 = /привет/gi;

const string_4_3 = 'Привет тебе, привет ему и вам привет!';

console.log(regexp_4_3_1.test(string_4_3));
console.log(regexp_4_3_1.test(string_4_3));
console.log(regexp_4_3_1.test(string_4_3));



// * 5)
console.log('\n \n 5) ');









// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');