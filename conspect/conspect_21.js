'use strict';

// * Регулярные выражения /RegExp/
// Регулярное выражение по сути это просто шаблон для поиска совпадения с ним в какой-либо строке и это объект
// Даже опытные разработчики наизусть не знают все правила и методы регулярных выражений. На практике работа с регулярными выражениями сходится к загугливанию и использованию готовых решений. Но необходимо понять и разобраться как их собирать, правила и принципы построения.

console.log('Регулярные выражения /RegExp/');


// 1) Start Code
console.log(`____________________________________________________________________________________

`);



// * 1) Создание объекта Регулярного выражения
// Регулярные выражения используются почти во всех языках программирования и работают +- одинаково.
console.log(' 1) Создание объекта Регулярного выражения');

// * Создать регулярное выражение можно двумся способами:
//   1 - использование конструктора
const regexp_1 = new RegExp('Hello');
//   2 - использование литералла
const regexp_2 = /Hello/;

// Строчка, по которой мы будем проходиться одним из наших регулярных выражений
const string_1 = 'Hello, my friend!';

console.log(regexp_1);
console.log(regexp_2);



// * Если рассматривать их внутри языка JS, то у них есть две основные задачи:
//   1 - валидация данных формы, мы можем контролировать формат вводимх данных и на сервер попадут данные в нужном нам формате
//   2 - изменение текстового содержимого блоков на странице вплоть до изменения вёрстки



// * 2) test()
// Данный метод пробегается по всей строке и находит совпадения с нашим шаблоном. Возвращает true или false
// Допустим можем делать проверку на то, что пользователь ввёл @ при указании почты
// Принимает только самое первое совпдание
console.log('\n \n 2) test()');
console.log(regexp_1.test(string_1));



// * 3) exec()
// Данный метод пробегается по всей строке и находит совпадения с нашим шаблоном. Возвращает объект
// Чаше всего данный метод применяют для выборки из текстого содержимого для каких-то щаблонных данных, например всех возможных email адресов или номеров телефона
// Принимает только самое первое совпдание
console.log('\n \n 3) exec()');
console.log(regexp_1.exec(string_1));
console.log(regexp_1.exec(string_1)[0]);



// * 4) Флаги регулярных выражений
console.log('\n \n 4) Флаги регулярных выражений');

// После шаблона 'Привет' ставится , и указываем флаг 'g'
const regexp_4_1 = new RegExp('привет', 'g');

// Если мы используем литерал, то флаг ставится после шаблона 'Привет' и /
const regexp_4_2 = /привет/g;

const string_4 = 'привет тебе, привет ему и вам привет!';

// * g - флаг означает, что мы будем искать все совпадения global`но
console.log(regexp_4_1.exec(string_4));
console.log(regexp_4_1.exec(string_4));
console.dir(regexp_4_1);










// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');

// * 1)
console.log('\n \n 1) ');